#include <iostream>
#include <string>
#include <vector>
#include <cassert>
#include <cmath>
#include <complex>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}

// Forward declarations
int32_t _xx_lcompilers_changed_main_xx();
namespace {
}

// Implementations
int32_t _xx_lcompilers_changed_main_xx()
{
    int32_t __return_var;
    int32_t x;
    x = (2 + 3)*5;
    std::cout << x << std::endl;
    __return_var = 0;
    return __return_var;
}

namespace {

void main2() {
    int32_t exit_code;
    exit_code = _xx_lcompilers_changed_main_xx();
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}

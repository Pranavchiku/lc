#include <iostream>
#include <string>
#include <vector>
#include <cassert>
#include <cmath>
#include <complex>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}

// Forward declarations
int32_t f(int32_t &x);

// Implementations
int32_t f(int32_t &x)
{
    int32_t __return_var;
    int32_t result;
    result = x/42;
    __return_var = result;
    return __return_var;
}


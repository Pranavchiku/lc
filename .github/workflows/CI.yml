name: CI

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main


jobs:
  Build:
    name: LFortran CI (${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      - uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: environment_unix.yml

      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}

      - name: Build (Linux / macOS)
        shell: bash -l {0}
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
        run: |
            ./build.sh

      - name: Test (Linux / macOS)
        shell: bash -l -e {0}
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
        run: |
            ./src/bin/lc --ast-dump tests/test.cpp
            ./src/bin/lc --extra-arg=-Isrc/runtime/include examples/expr2.c --asr-dump
            ./run_tests.py

      - name: Test2 (Linux / macOS)
        shell: bash -l -e {0}
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
        run: |
            # clang from conda does not work so deactivate the conda environment
            micromamba deactivate

            which clang
            which node

            # ./src/bin/lc examples/expr2.c --backend c --extra-arg="-Isrc/runtime/include" --
            # clang -o my_app expr2.out__generated__.c -I src/libasr/runtime -Wl,-rpath,src/runtime -Lsrc/runtime -llc_runtime
            # ./my_app

            ./src/bin/lc examples/expr2.c --backend wasm --extra-arg="-Isrc/runtime/include" --
            node --experimental-wasi-unstable-preview1 expr2.out__generated__.wasm.js
